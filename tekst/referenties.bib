% Referenties H5
@misc{Competitors:online,
  author       = {comparably},
  title        = {Ticketmaster Competitors | Comparably},
  howpublished = {\url{https://www.comparably.com/companies/ticketmaster/competitors}},
  year         = {},
  note         = {(Accessed on 11/24/2023)}
}

@article{tompkinsanalysis,
  author  = {Tompkins, Terrance},
  journal = {International Journal of Music Business Research},
  number  = {1},
  title   = {An analysis of ticket pricing in the primary and secondary concert marketplace},
  volume  = {8},
  year    = {2019}
}

@misc{Daniel:online,
  author       = {Daniel Tencer},
  title        = {The concert ticket market is 'dramatically underpriced'… and 3 other things we learned from Michael Rapino on Live Nation's Q1 earnings call - Music Business Worldwide},
  howpublished = {\url{https://www.musicbusinessworldwide.com/the-concert-ticket-market-is-dramatically-underpriced-and-3-other-things-we-learned-from-michael-rapino-on-live-nations-q1-earnings-call/}},
  year         = {2023},
  note         = {(Accessed on 11/24/2023)}
}

@article{Holmstrom2019,
  author   = {Holmstrom, Erik},
  title    = {Dancing in the Dark: An Analysis of the Live Entertainment Industry and the Deceptive Market Practices of Ticketmaster and Live Nation},
  journal  = {Western Journal of Legal Studies},
  year     = {2019},
  volume   = {9},
  number   = {2},
  pages    = {1-22},
  url      = {https://heinonline.org/HOL/P?h=hein.journals/wesjalals9&i=128},
  url      = {https://heinonline.org/HOL/PrintRequest?handle=hein.journals/wesjalals9&collection=journals&div=10&id=128&print=section&sction=10},
  language = {eng}
}

@misc{Knack:online,
  author       = {Renee Henderlckx},
  title        = {Tackelen de Taylor Swift-fans het monopolie van Live Nation?},
  howpublished = {\url{https://focus.knack.be/muziek/tackelen-de-taylor-swift-fans-de-monopolie-van-live-nation/}},
  year         = {2023},
  note         = {(Accessed on 11/24/2023)}
}

% Actualiteit Taylor Swift: ophef in 2022

@article{kelley2022senate,
  author  = {Kelley, Lora},
  journal = {{The New York Times}},
  title   = {Senate Announces Hearing After Chaos Over {Taylor Swift} Ticket Sales},
  year    = {2022},
  month   = nov # {~22,},
  note    = {\url{https://www.nytimes.com/2022/11/22/business/senate-antitrust-ticketmaster-taylor-swift.html}}
}

@article{belga2022taylor,
  author  = {Belga},
  journal = {{De Standaard}},
  title   = {{Taylor Swift} tackelt {Ticketmaster} na chaos bij ticketverkoop},
  year    = {2022},
  month   = nov # {~18,},
  note    = {\url{https://www.standaard.be/cnt/dmf20221118_97202987}}
}

% Actualiteit andere problemen in ticketsector dan november 2022

@article{sisario2023ticketmaster,
  author  = {Sisario, Ben},
  journal = {{The New York Times}},
  title   = {{Ticketmaster} Pauses {Taylor Swift}’s {Eras Tour} Sale in {France}.},
  year    = {2023},
  month   = jul # {~11,},
  note    = {\url{https://www.nytimes.com/2023/07/11/arts/music/taylor-swift-ticketmaster-france.html}}
}

@article{timsit2023its,
  author  = {Timsit, Annabelle},
  journal = {{The Washington Post}},
  title   = {It’s not just {Swifties}. {Ticketmaster} also enrages {Eurovision} fans.},
  year    = {2023},
  month   = mar # {~8,},
  note    = {\url{https://www.washingtonpost.com/arts-entertainment/2023/03/08/ticketmaster-eurovision-2023-ticket-sales/}}
}

% Actualiteit capaciteitsproblemen in andere sectoren

@article{warren2023chatgpt,
  author  = {Warren, Tom},
  journal = {{The Verge}},
  title   = {{ChatGPT} is back online after a 90-minute ‘major’ {OpenAI} outage},
  year    = {2023},
  month   = nov # {~8,},
  note    = {\url{https://www.theverge.com/2023/11/8/23952129/chatgpt-down-openai-api-major-outage}}
}

@article{warren2020discord,
  author  = {Warren, Tom},
  journal = {{The Verge}},
  title   = {{Discord} experienced an outage that made many servers unavailable},
  year    = {2020},
  month   = mar # {~16,},
  note    = {\url{https://www.theverge.com/2020/3/16/21182489/discord-down-outage-server-issues-chat-api-errors-details}}
}

@article{reuters2023what,
  author  = {Reuters},
  journal = {{Reuters}},
  title   = {What does {Twitter} 'rate limit exceeded' mean for users?},
  year    = {2023},
  month   = jul # {~4,},
  note    = {\url{https://www.reuters.com/technology/what-does-twitter-rate-limit-exceeded-mean-users-2023-07-03/}}
}


% Vermeldt dat outages hoge kosten met zich mee kunnen brengen (maar
% andere bron van Guitart et al. is daar beter geschikt voor).
% Goede algemene bron die beschrijving geeft van capaciteitsproblemen
% Geeft literature/review studie met taxomonie van verschillende
% technien om performance van internetdiensten te garanteren.

@article{guitart2010survey,
  author   = {Guitart, Jordi and Torres, Jordi and Ayguadé, Eduard},
  title    = {A survey on performance management for internet applications},
  journal  = {Concurrency and Computation: Practice and Experience},
  volume   = {22},
  number   = {1},
  pages    = {68-106},
  doi      = {https://doi.org/10.1002/cpe.1470},
  abstract = {Abstract Internet applications have become indispensable for many business and personal processes, turning the performance of these applications into a key issue. For this reason, recent research has comprehensively explored mechanisms for managing the performance of these applications, with special focus on dealing with overload situations and providing QoS guarantees to clients. This paper makes a survey on the different proposals in the literature for managing Internet applications' performance. We present a complete taxonomy that characterizes and classifies these proposals into several categories including request scheduling, admission control, service differentiation, dynamic resource management, service degradation, control theoretic approaches, works using queuing models, observation-based approaches that use runtime measurements, and overall approaches combining several mechanisms. For each work, we provide a brief description in order to provide the reader with a global understanding of the research progress in this area. Copyright © 2009 John Wiley \& Sons, Ltd.},
  year     = {2010}
}

% Vermeldt dat outages hoge kosten met zich mee kunnen bregen in context
% e-commerce.
% Gaat specifiek in op bestaande connecties verderzetten en die prioritiseren.
% Concreet: SSL connection differentiation en session-based 
% adaptive admission control.
% Vermeldt ook dat er grote variaties in demand zijn bij hedendaagse websites.
% Geeft goede algemene beschrijving van wat overload/capaciteitsproblemen
% inhouden.

@article{guitart2007designing,
  author   = {Guitart, Jordi and Carrera, David and Beltran, Vicenç and Torres, Jordi and Ayguadé, Eduard},
  title    = {Designing an overload control strategy for secure e-commerce applications},
  journal  = {Computer Networks},
  volume   = {51},
  number   = {15},
  pages    = {4492-4510},
  doi      = {https://doi.org/10.1016/j.comnet.2007.05.010},
  abstract = {Uncontrolled overload can lead e-commerce applications to considerable revenue losses. For this reason, overload prevention in these applications is a critical issue. In this paper we present a complete characterization of secure e-commerce applications scalability to determine which are the bottlenecks in their performance that must be considered for an overload control strategy. With this information, we design an adaptive session-based overload control strategy based on SSL (Secure Socket Layer) connection differentiation and admission control. The SSL connection differentiation is a key factor because the cost of establishing a new SSL connection is much greater than establishing a resumed SSL connection (it reuses an existing SSL session on the server). Considering this big difference, we have implemented an admission control algorithm that prioritizes resumed SSL connections to maximize the performance in session-based environments and dynamically limits the number of new SSL connections accepted, according to the available resources and the current number of connections in the system, in order to avoid server overload. Our evaluation on a Tomcat server demonstrates the benefit of our proposal for preventing server overload.},
  year     = {2007}
}

% Vermeldt dat outages hoge maatschappelijke kosten met zich mee kunnen brengen
% want gaat in op outages van crisis-geralteerde web servers (bv. rampen,
% terrorisme). Informatievoorziening kan ingedrang komen.
% Gaat in op idee content adaptie. Beter nog aan iedereen meest relevante info
% kunnen geven dan volledige website aan klein aantal gebruikers of niemand.

@inproceedings{andersson2006design,
  author    = {Andersson, M. and Host, M. and Jianhua, C. and Nyberg, C. and Kihl, M.},
  title     = {Design and Evaluation of an Overload Control System for Crisis-Related Web Server Systems},
  booktitle = {International Conference on Internet Surveillance and Protection ({ICISP} '06)},
  doi       = {10.1109/ICISP.2006.8},
  abstract  = {During recent years we have seen several large-scale crises. The 9/11 terror attacks, tsunamis, storms, floods and bombings have all caused a great deal of damage. A common factor in these crises has been the need for information and one important source of information is usually Web sites. In this work we investigate and design an overload control system for Web sites that are vital in crises. The overload control system uses content adaption to dynamically control Web site performance},
  year      = {2006},
  month     = aug
}

% Geeft beschrijving van onderscheid tussen transient en persistent overload.
% Geeft ook beschrijving van wat overload is maar al voldoende afgedekt door
% andere bronnen, goede toevoeging aan beschrijving hier is vooral onderscheid
% tussen tijdelijk en continu.
% Gaat in op de techniek van scheduling van requests.
% Hoofdonderwerp artikel is vergelijking van FAIR met SRPT voor scheduling.
% Bij die strategie worden geen requests gedropt (i.t.t. admission control).
% Normaal worden resources overheen alle verzoeken verdeeld (FAIR).
% Beter prioriteit geven aan verzoeken voor kleine bestanden.
% Shortest-remaining-processing-time (SRPT) eerst. Zorgt voor lagere gemiddelde
% responstijden.

@article{schroeder2006web,
  author   = {Schroeder, Bianca and Harchol-Balter, Mor},
  title    = {Web Servers under Overload: How Scheduling Can Help},
  journal  = {ACM Transactions on Internet Technology},
  volume   = {6},
  number   = {1},
  pages    = {20–52},
  doi      = {10.1145/1125274.1125276},
  abstract = {This article provides a detailed implementation study on the behavior of web serves that serve static requests where the load fluctuates over time (transient overload). Various external factors are considered, including WAN delays and losses and different client behavior models. We find that performance can be dramatically improved via a kernel-level modification to the web server to change the scheduling policy at the server from the standard FAIR (processor-sharing) scheduling to SRPT (shortest-remaining-processing-time) scheduling. We find that SRPT scheduling induces no penalties. In particular, throughput is not sacrificed and requests for long files experience only negligibly higher response times under SRPT than they did under the original FAIR scheduling.},
  year     = {2006}
}

% Bevat internetstandaard omtrent HTTP-statuscodes.

@misc{fielding2022http,
  author       = {Fielding, R. T. and Nottingham, M. and Reschke, J.},
  title        = {{HTTP} Semantics},
  series       = {Request for Comments},
  number       = 9110,
  pagetotal    = 194,
  howpublished = {RFC 9110},
  publisher    = {RFC Editor},
  doi          = {10.17487/RFC9110},
  url          = {https://www.rfc-editor.org/info/rfc9110},
  abstract     = {The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the "http" and "https" Uniform Resource Identifier (URI) schemes. This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.},
  year         = 2022,
  month        = jun
}

% Referenties H7 (Machtsmisbruik)

@misc{Similarweb,
  title        = "Top Websites Ranking: Most Visited Tickets Websites",
  author       = "{Similarweb LTD}",
  howpublished = "\url{https://www.similarweb.com/top-websites/e-commerce-and-shopping/tickets/}",
  year         = 2023,
  note         = "Last updated : 1 November 2023"
}



@misc{Wikimedia,
  title        = "Wikipedia: Ticketmaster",
  author       = "{Wikimedia Foundation, Inc.}",
  howpublished = "\url{https://en.wikipedia.org/wiki/Ticketmaster}",
  year         = 2023,
  note         = "Last edited : 24 October 2023"
}

@misc{Investopedia,
  title        = "Is Ticketmaster a Monopoly?",
  author       = "{Investopedia}",
  howpublished = "\url{https://www.investopedia.com/is-ticketmaster-a-monopoly-6834539#:~:text=What%20is%20Ticketmaster%27s%20market%20share,by%20far%20the%20industry%20leader.}",
  year         = 2023,
  note         = "Last updated : February 18 2023"
}

% Beschrijft ethische vraagstukken m.b.t. web crawling/scraping waaronder
% overload op server.
@article{thelwall2006web,
author = {Thelwall, Mike and Stuart, David},
title = {Web crawling ethics revisited: Cost, privacy, and denial of service},
journal = {Journal of the American Society for Information Science and Technology},
volume = {57},
number = {13},
pages = {1771-1779},
doi = {https://doi.org/10.1002/asi.20388},
abstract = {Abstract Ethical aspects of the employment of Web crawlers for information science research and other contexts are reviewed. The difference between legal and ethical uses of communications technologies is emphasized as well as the changing boundary between ethical and unethical conduct. A review of the potential impacts on Web site owners is used to underpin a new framework for ethical crawling, and it is argued that delicate human judgment is required for each individual case, with verdicts likely to change over time. Decisions can be based upon an approximate cost-benefit analysis, but it is crucial that crawler owners find out about the technological issues affecting the owners of the sites being crawled in order to produce an informed assessment.},
year = {2006}
}

% Beschrijft o.a. hoe events overload kunnen veroorzaken. Verwijst naar
% online kortingen, gebeurtenissen zoals sportevents ...
@inproceedings{iyer2001overload,
  author          = {Iyer, Ravi and Tewari, Vijay and Kant, Krishna},
  title           = {Overload Control Mechanisms for Web Servers},
  booktitle       = {Performance and {QoS} of Next Generation Networking},
  editor          = {Goto, Kunio and Hasegawa, Toshiharu and Takagi, Hideaki and Takahashi, Yutaka},
  publisher       = {Springer London},
  address         = {London},
  pages           = {225-244},
  abstract        = {Web servers often experience overload situations due to the extremely bursty nature of Internet traffic, popular online events or malicious attacks. Such overload situations significantly affect performance and may result in lost revenue as reported by the recent denial of service attacks. Overload control schemes are well researched and understood in telecommunication systems. However, their use in web servers is currently very limited. Our focus in this paper is to propose effective overload control mechanisms for web servers. An important aspect in overload control is to minimize the work spent on a request which is eventually not serviced due to overload. This paper studies three simple schemes for controlling the load effectively. The first scheme selectively drops incoming requests as they arrive at the server using an intelligent network interface card (NIC). The second scheme provides feedback to a previous node (proxy server or ultimate client) to allow a gapping control that reduces offered load under overload. The third scheme is simply a combination of the two. The experimental results show that even these simple schemes are effective in improving the throughput of the web server by 40{\%} and response time by 70{\%} under heavy overloads, as compared with the case without any overload control.},
  year            = {2001}
}

% Beschrijft DoS-aanvallen als malafide oorzaak overbelasting
% Beschrijft beschermingsmaatregelen
@article{loukas2009protection,
    author          = {Loukas, Georgios and Öke, Gülay},
    title           = {Protection Against Denial of Service Attacks: A Survey},
    journal         = {The Computer Journal},
    volume          = {53},
    number          = {7},
    pages           = {1020-1037},
    doi             = {10.1093/comjnl/bxp078},
    abstract        = {Denial of service (DoS) is a prevalent threat in today's networks because DoS attacks are easy to launch, while defending a network resource against them is disproportionately difficult. Despite the extensive research in recent years, DoS attacks continue to harm, as the attackers adapt to the newer protection mechanisms. For this reason, we start our survey with a historical timeline of DoS incidents, where we illustrate the variety of types, targets and motives for such attacks and how they evolved during the last two decades. We then provide an extensive literature review on the existing research on DoS protection with an emphasis on the research of the last years and the most demanding aspects of defence. These include traceback, detection, classification of incoming traffic, response in the presence of an attack and mathematical modelling of attack and defence mechanisms. Our discussion aims to identify the trends in DoS attacks, the weaknesses of protection approaches and the qualities that modern ones should exhibit, so as to suggest new directions that DoS research can follow.},
    year            = {2009},
}

% SCHALING

% Geeft duidelijke beschrijving horizontale vs. verticale schaling
% "Horizontal scaling refers to changing the number of servers (physical or
% virtual) hosting an Internet service or a multi-tier application"
% "Vertical scaling refers to adjusting the effective “sizes” of
% individual servers."
% Wijst er ook op dat het kan gaan om fysiek of virtueel. Je kan ook virtuele
% machines opschalen door een individuele VM meer resources te geven en dat kan
% ook werken met auto-scaling.
@inproceedings{lu2014applicationdriven,
  author          = {Lu, Lei and Zhu, Xiaoyun and Griffith, Rean and Padala, Pradeep and Parikh, Aashish and Shah, Parth and Smirni, Evgenia},
  title           = {Application-driven dynamic vertical scaling of virtual machines in resource pools}, 
  booktitle       = {2014 {IEEE} Network Operations and Management Symposium ({NOMS})}, 
  pages           = {1-9},
  doi             = {10.1109/NOMS.2014.6838238},
  abstract        = {Most modern hypervisors offer powerful resource control primitives such as reservations, limits, and shares for individual virtual machines (VMs). These primitives provide a means to dynamic vertical scaling of VMs in order for the virtual applications to meet their respective service level objectives (SLOs). VMware DRS offers an additional resource abstraction of a resource pool (RP) as a logical container representing an aggregate resource allocation for a collection of VMs. In spite of the abundant research on translating application performance goals to resource requirements, the implementation of VM vertical scaling techniques in commercial products remains limited. In addition, no prior research has studied automatic adjustment of resource control settings at the resource pool level. In this paper, we present AppRM, a tool that automatically sets resource controls for both virtual machines and resource pools to meet application SLOs. AppRM contains a hierarchy of virtual application managers and resource pool managers. At the application level, AppRM translates performance objectives into the appropriate resource control settings for the individual VMs running that application. At the resource pool level, AppRM ensures that all important applications within the resource pool can meet their performance targets by adjusting controls at the resource pool level. Experimental results under a variety of dynamically changing workloads composed by multi-tiered applications demonstrate the effectiveness of AppRM. In all cases, AppRM is able to deliver application performance satisfaction without manual intervention.},
  year            = {2014},
  month           = may,
}

% Geeft eveneens duidelijk beschrijving horizontale vs. verticale schaling
% Verticaal: "deployment of applications on large shared-memory servers (large SMPs)"
% Verwijst naar stijgende grootte en clockrate processors
% Horizontaal: "deployment of applications on multiple small interconnected servers (clusters)"
@inproceedings{michael2007scaleup,
  author          = {Michael, Maged and Moreira, Jose E. and Shiloach, Doron and Wisniewski, Robert W.},
  title           = {Scale-up x Scale-out: A Case Study using {Nutch}/{Lucene}},
  booktitle       = {2007 {IEEE} International Parallel and Distributed Processing Symposium}, 
  pages           = {1-8},
  doi             = {10.1109/IPDPS.2007.370631},
  abstract        = {Scale-up solutions in the form of large SMPs have represented the mainstream of commercial computing for the past several years. The major server vendors continue to provide increasingly larger and more powerful machines. More recently, scale-out solutions, in the form of clusters of smaller machines, have gained increased acceptance for commercial computing. Scale-out solutions are particularly effective in high-throughput Web-centric applications. In this paper, we investigate the behavior of two competing approaches to parallelism, scale-up and scale-out, in an emerging search application. Our conclusions show that a scale-out strategy can be the key to good performance even on a scale-up machine. Furthermore, scale-out solutions offer better price/performance, although at an increase in management complexity.},
  year            = {2007},
  month           = mar,
}

% Deze bron verwijst duidelijker naar welke systeemresources allemaal verticaal
% gescaled kunnen worden (RAM, storage, CPU)
% Vermeldt ook horizontale schaling maar is minder essentie artikel. Dus
% daarvoor beter andere bronnen
@inproceedings{appuswamy2013scaleup,
  author          = {Appuswamy, Raja and Gkantsidis, Christos and Narayanan, Dushyanth and Hodson, Orion and Rowstron, Antony},
  title           = {Scale-up vs Scale-out for {Hadoop}: Time to Rethink?},
  booktitle       = {Proceedings of the 4th Annual Symposium on Cloud Computing},
  series          = {{SOCC} '13},
  articleno       = {20},
  numpages        = {13},
  publisher       = {Association for Computing Machinery},
  address         = {New York, NY, USA},
  location        = {Santa Clara, California},
  doi             = {10.1145/2523616.2523629},  
  abstract        = {In the last decade we have seen a huge deployment of cheap clusters to run data analytics workloads. The conventional wisdom in industry and academia is that scaling out using a cluster of commodity machines is better for these workloads than scaling up by adding more resources to a single server. Popular analytics infrastructures such as Hadoop are aimed at such a cluster scale-out environment.Is this the right approach? Our measurements as well as other recent work shows that the majority of real-world analytic jobs process less than 100 GB of input, but popular infrastructures such as Hadoop/MapReduce were originally designed for petascale processing. We claim that a single "scale-up" server can process each of these jobs and do as well or better than a cluster in terms of performance, cost, power, and server density. We present an evaluation across 11 representative Hadoop jobs that shows scale-up to be competitive in all cases and significantly better in some cases, than scale-out. To achieve that performance, we describe several modifications to the Hadoop runtime that target scale-up configuration. These changes are transparent, do not require any changes to application code, and do not compromise scale-out performance; at the same time our evaluation shows that they do significantly improve Hadoop's scale-up performance.},
  year            = {2013},
}

% Deze bron gaat vooral over cloud computing en elasticiteit d.m.v.
% pay-as-you-go prijsmodel en auto-scaling. 
% Geeft ook beschrijving verticaal en horizontaal schalen maar verwijst puur
% naar VMs. Idee van bron is vooral dat er trade-offs zijn tussen verschillende
% scaling strategieen en dat doordachte keuze belangrijk bij kiezen
% auto-scaling configuratie.
@article{gandhi2018modeldriven,
  author          = {Gandhi, Anshul and Dube, Parijat and Karve, Alexei and Kochut, Andrzej and Zhang, Li},
  title           = {Model-driven optimal resource scaling in cloud},
  journal         = {Software and systems modeling},
  volume          = {17},
  number          = {2},
  pages           = {509-526},
  doi             = {https://doi.org/10.1007/s10270-017-0584-y},
  abstract        = {Cloud computing offers the flexibility to dynamically size the infrastructure in response to changes in workload demand. While both horizontal scaling and vertical scaling of infrastructure are supported by major cloud providers, these scaling options differ significantly in terms of their cost, provisioning time, and their impact on workload performance. Importantly, the efficacy of horizontal and vertical scaling critically depends on the workload characteristics, such as the workload’s parallelizability and its core scalability. In today’s cloud systems, the scaling decision is left to the users, requiring them to fully understand the trade-offs associated with the different scaling options. In this paper, we present our solution for optimizing the resource scaling of cloud deployments via implementation in OpenStack. The key component of our solution is the modeling engine that characterizes the workload and then quantitatively evaluates different scaling options for that workload. Our modeling engine leverages Amdahl’s Law to model service timescaling in scale-up environments and queueing-theoretic concepts to model performance scaling in scale-out environments. We further employ Kalman filtering to account for inaccuracies in the model-based methodology and to dynamically track changes in the workload and cloud environment.},
  year            = {2018},
}

% Idee trade-offs tussen verschillende scaling strategieen en doordachte
% keuze bij elastische cloud techniecken belangrijk.
@inproceedings{hwang2014scaleout,
  author          = {Hwang, Kai and Shi, Yue and Bai, Xiaoying},
  title           = {Scale-Out vs. Scale-Up Techniques for Cloud Performance and Productivity},
  booktitle       = {2014 {IEEE} 6th International Conference on Cloud Computing Technology and Science}, 
  pages           = {763-768},
  doi             = {10.1109/CloudCom.2014.66},
  abstract        = {An elastic cloud provisions machine instances upon user demand. Auto-scaling, scale-out, scale-up, or any mixture techniques are used to reconfigure the user cluster as workload changes. We evaluate three scaling strategies to upgrade the performance, efficiency and productivity of elastic clouds like EC2, Rack space, etc. We developed new performance models and run the Hi Bench benchmark to test Hadoop performance on various EC2 configurations. The strengths and shortcomings of three scaling strategies are revealed in our Hi Bench experiments: (1). Scale-out overhead is shown lower than that experienced in scale-up or mixed scaling clouds. Scale-out to a larger cluster of small nodes demonstrated high scalability. (2). Scaling up and mixed scaling have high performance in using smaller clusters with a few powerful machine instances. (3). With a mixed scaling mode, the cloud productivity is shown upgradable with higher flexibility in applications with performance/cost tradeoffs.},
  year            = {2014},
  month           = dec,
}


% Bronnen omtrent web content adaption
% Idee dat afgeleverde content aangepast kan worden om overload te verminderen.
% Succesful laden van minder intensieve content beter dan volledige outage.
% Idee dat content-adaptie kan geautomatiseerd worden. 
% Deze techniek is vooral ontworpen om om te gaan met peak loads.
% Deze techniek is een vorm van overload management op niveau van de
% individuele server
% Tarek F Abdelzaher, Nina Bhatti, Web content adaptation to improve server overload behavior, Computer Networks,
% Michael Gopshtein and Dror G. Feitelson. 2011. Trading off quality for throughput using content adaptation in web servers. In Proceedings of the 4th Annual International Conference on Systems and Storage (SYSTOR '11). Association for Computing Machinery, New York, NY, USA, Article 6, 1–14. https://doi.org/10.1145/1987816.1987824


% Web content adaptie is gerelateerd is dymaische gecontrolleerde service degradatie.
% Als applicatie uit services bestaat kunnen bottlenecks worden gezocht.
% Degraderen van services die veel resources gebruiken en lage prioriteit hebben
% om zo voorziening key services te vrijwaren.
% Idee dat service degradation vermijdt dat clieenten zoals bij admission
% control worden geweigerd. Het vermindert het niveau van dienstverlening,
% lagere kwaliteit maar wel nog steeds dienstverlening.
% Kan manueel maar beter om degradatieplan op te stellen op basis van montiroing
% en de businesslogica om echt in te spelen op bottlenecks.
% Kan daardoor ook worden geautomatiseerd.
% Wang, Z., Zhou, M. & Mei, H. Towards a degradation-based mechanism for adaptive overload control. Sci. China Inf. Sci. 55, 2708–2722 (2012). https://doi.org/10.1007/s11432-012-4738-9
% Referenties uit referentielijst van andere bronnnen:
% M. Welsh and D. Culler. Adaptive Overload Control for Busy Internet Servers. In Proceedings of the 4th USENIX Conference on Internet Technologies and Systems (USITS'03), pages 26--28, Seattle, WA, March 2003. 
% A. Fox, S. D. Gribble, E. A. Brewer, and E. Amir. Adapting to Network and Client Variability via On-Demand Dynamic Distillation. In ASPLOS, 1996. 

% Bronnen omtrent client admission control. Bepaalde subset van clienten weigeren.
% Beter consistent aantal gebruikers serveren en andere weigeren. dan iedereen affecteren.
% Monitoring load en capaciteit. Weigering binnenkomende verzoeken om
% geaccepteerde wel te kunnen afhandelen. Algoritmen bepalen welke verzoeken
% worden geweigerd. Mogelijk om het session-based te doen SBAC
% A. Iyengar, E. MacNair and T. Nguyen, An analysis of Web server performance, GLOBECOM, Vol. 3, pp. 1943–1947, Phoenix, AZ, November 1997.
% R. Iyer, V. Tewari, and K. Kant. Overload Control Mechanisms for Web Servers. In Workshop on Performance and QoS of Next Generation Network, Nagoya, Japan, Nov. 2000.
% J. M. Blanquer, A. Batchelli, K. Schauser, and R. Wolski. Quorum: Flexible Quality of Service for Internet Services. In Proc. of the 2nd USENIX Symposium on Networked Systems Design and Implementation (NSDI), Boston MA, May 2005
% S. Elnikety, E. Nahum, J. Tracey, and W. Zwaenepoel. A Method for Transparent Admission Control and Request Scheduling in E-Commerce Web Sites. In WWW, pages 276--286, 2004. 
% CHERKASOVA , L. AND P HAAL , P. 1998. Session-based admission control: A mechanism for improv-
% ing the performance of an overloaded web server. Tech. Rep. HPL-98-119, Hewlett Packard
% Laboratories
B. Urgaonkar and P. Shenoy. Cataclysm: Policing Extreme Overloads in Internet Applications. In Proc. of the International World Wide Web Conference (WWW'05), Chiba, Japan, Jun. 2005.
%  Voigt, R. Tewari, and D. Freimuth. Kernel Mechanisms for Service Differentiation in Overloaded Web Servers. In USENIX Annual Technical Conference, pages 189-202, 2001.
% IYER , R., T EWARI, V., AND K ANT, K. 2000. Overload control mechanisms for web servers. In Workshop
% on Performance and QoS of Next Generation Networks (Nov).
% WELSH , M. AND CULLER, D. 2003. Adaptive overload control for busy internet servers. In Proceed-
% ings of the USENIX Symposium on Internet Technologies and Systems.
% ELNIKETY, S., N AHUM, E. M., T RACEY, J., AND Z WAENEPOEL, W. 2004. A method for transparent admis-
% sion control and request scheduling in dynamic e-commerce Web sites. In International World-
% Wide Web Conference (WWW’04) (May) New York, NY.
% Deze bron hieroner vermeldt specifiek SBAC.
% Lu, L., Cherkasova, L., de Nitto Personè, V., Mi, N., Smirni, E. (2010). AWAIT: Efficient Overload Management for Busy Multi-tier Web Services under Bursty Workloads. In: Benatallah, B., Casati, F., Kappel, G., Rossi, G. (eds) Web Engineering. ICWE 2010. Lecture Notes in Computer Science, vol 6189. Springer, Berlin, Heidelberg. https://doi.org/10.1007/978-3-642-13911-6_6

% Horizontale schaling
% Onderstaande bron bespreekt auto-scaling via de cloud. Hosting via de cloud
% zou elasticiteit bieden om flexibel uit de breiden en in te krimpen
% dmv auto-scaling via detectie workload veranderingen
% Bespreekt daarnaast ook geografische verspreiding en load balancing
% daaroverheen indien bepaalde regio overload heeft. Ook hier biedt cloud
% volgens artikel voordeel omdat zij servers over hele wereld hebben waardoor
% makkelijker hele wereld kan worden bediend. Geographical load balancing is handig
% aangezien flash crowds meestal niet wereldwijd gebeuren door tijdzone en culture
% verschillen.
% Verwijst bovendien naar de term IaaS in context cloud hosting.
% Gebruikt de term algoritmen in context van load balancing.
% Qu, C, Calheiros, RN, Buyya, R. Mitigating impact of short-term overload on multi-cloud web applications through geographical load balancing. Concurrency Computat: Pract. Exper. 2017; 29:e4126. https://doi.org/10.1002/cpe.4126 
% Bron specifiek omtrent rent-a-server voor scaling on demand
% A. Vahadat, T. Anderson, M. Dahlin, E. Belani, D. Culler, P. Eastham, C. Yoshikawa, WebOS: operating system services for wide area applications, in: Proc. of the 7th International Symposium on High Performance Distributed Computing, Chicago, IL, July 1998.
% Bronnen omtrent distributie over geografisch verspreidde servers
% M. Colajanni, P.S. Yu and D.M. Dias, Scheduling algorithms for distributed Web servers, in: Proc. of the 17th International Conference on Distributed Computing Systems, pp. 169–176, Baltimore, MD, May 1997.
% M. Colajanni, P.S. Yu, V. Cardellini, M.P. Papazoglou, M. Takizawa, B. Kramer and S. Chanson, Dynamic load balancing in geographically distributed heterogeneous Web servers, in: Proc. of the 18th International Conference on Distributed Computing Systems, pp. 295–302, Amsterdam, Netherlands, May 1998.
% R.S. Engelschall, Balancing your Web site. Practical approaches for distributing HTTP traffic, WEB-Techniques 3(5) (1998): 45–52.
% Onderstaande bron bespreekt belang van predictie-technieken voor performance
% en load zodat cloud infrastructuur goed elastisch kan schalen
% Maryam Amiri, Leyli Mohammad-Khanli, Survey on prediction models of applications for resources provisioning in cloud, Journal of Network and Computer Applications, Volume 82, 2017, https://doi.org/10.1016/j.jnca.2017.01.016.

% Bronnen omtrent redirectie en redistributie van verzoeken. LOAD balancing
% A. Mourad, Huiqun-Liu, Scalable Web server architectures, in: Proc. of the 2nd IEEE Symposium on Computer and Communications, pp. 12–16, Alexandria, Egypt, July 1997.

% Bronnen omtrent load balancing
% Yong Meng Teo, Ayani R. Comparison of Load Balancing Strategies on Cluster-based Web Servers. SIMULATION. 2001;77(5-6):185-195. doi:10.1177/003754970107700504
% G. P. Sarmila, N. Gnanambigai and P. Dinadayalan, "Survey on fault tolerant — Load balancing algorithmsin cloud computing," 2015 2nd International Conference on Electronics and Communication Systems (ICECS), Coimbatore, India, 2015, pp. 1715-1720, doi: 10.1109/ECS.2015.7124879.
% Dynamische scheduling overheen clusters van servers
% D. Andersen and T. McCune, Towards a hierarchical scheduling system for distributed WWW server clusters, in: Proc. of the 7th International Symposium on High Performance Distributed Computing, Chicago, IL, July 1998.

% Vermeldt idee dat er drie factoren zijn die performance computersysteem
% beinvloeden. Systeemdesign, systeeimplementatie en werkbelasting.
% Eesrste twee elementen zijn relevant voor optimalisatie-items wantt
% gaat over datastructuren, algoritmen, architecturen, programmeer-
% paradigma's
% Book gaat dieper in op workload modelling voor performance evaluation
% Geen access om hoofdstukken dieper te lezen.
% https://www.cambridge.org/core/books/workload-modeling-for-computer-systems-performance-evaluation/2D65847DD21F72DA5C529F565234DCD6

% Bronnen omtrent load shedding / selective termination
% Idee dat er verzoeken met lange en korte loopttijd zijn. Lange verzoeken
% kunnen korte verzoeken op helling zetten doordat ze meer resources vragen
% Gebruik van systeem dat lange verzoeken die veel resources gebruiken
% beeindigt.
% Jingyu Zhou and Tao Yang. 2006. Selective early request termination for busy internet services. In Proceedings of the 15th international conference on World Wide Web (WWW '06). Association for Computing Machinery, New York, NY, USA, 605–614. https://doi.org/10.1145/1135777.1135866

% Bronnen omtrent caching
% S. Sivasubramanian, G. Pierre, M. van Steen, and G. Alonso, "Analysis of caching and replication strategies for web applications". IEEE Internet Comput. 11(1), pp. 60--66, Jan--Feb 2007.

% Scheduling als techniek zoals admission control en adaptive degradation
% technieken zijn. Differentieren tussen requests obv duur en short
% requests bijvoorbeeld prioritiseren.
% J. Zhou, C. Zhang, T. Yang and L. Chu, "Request-Aware Scheduling for Busy Internet Services," Proceedings IEEE INFOCOM 2006. 25TH IEEE International Conference on Computer Communications, Barcelona, 2006, pp. 1-11, doi: 10.1109/INFOCOM.2006.279.

% Stress testing met workload generators en simulations
% Raúl Peña-Ortiz, José A. Gil, Julio Sahuquillo, Ana Pont, Analyzing web server performance under dynamic user workloads, Computer Communications, Volume 36, Issue 4, 2013, https://doi.org/10.1016/j.comcom.2012.11.005.
% Chapters uit dit boek: https://www.sciencedirect.com/book/9780128008874/modeling-and-simulation-of-computer-networks-and-systems
% Chapter over web performance evaluations d.m.v. workload generators
% Over een generator die verschillende workloads kan genereren met
% als doel web performance metrics.
% Raúl Peña-Ortiz, José Antonio Gil, Julio Sahuquillo, Ana Pont, Josep Domènech, Chapter 8 - A new testbed for web performance evaluation, Editor(s): Mohammad S. Obaidat, Petros Nicopolitidis, Faouzi Zarai, Modeling and Simulation of Computer Networks and Systems, Morgan Kaufmann, 2015, Pages 225-251, https://doi.org/10.1016/B978-0-12-800887-4.00008-0.
% Chapter over state of the art voor workload generation voor prestat-evaluaties
% Raúl Peña-Ortiz, José Antonio Gil, Julio Sahuquillo, Ana Pont, Josep Domènech,Chapter 6 - Generating realistic workload for web performance studies, Editor(s): Mohammad S. Obaidat, Petros Nicopolitidis, Faouzi Zarai, Modeling and Simulation of Computer Networks and Systems, Morgan Kaufmann, 2015, Pages 157-186, https://doi.org/10.1016/B978-0-12-800887-4.00006-7.
